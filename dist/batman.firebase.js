// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Batman.Firebase = (function() {
    function Firebase() {}

    return Firebase;

  })();

  Batman.Firebase.Reference = (function() {
    function Reference(_arg) {
      this.path = _arg.path, this.parent = _arg.parent;
      if (this.parent) {
        this.ref = this.parent.child(this.path);
      } else {
        this.ref = new Firebase(this.path);
      }
    }

    Reference.prototype.child = function(path) {
      return this.ref.child(path);
    };

    return Reference;

  })();

  Batman.App.syncsWithFirebase = function(firebaseAppName) {
    this.firebaseAppName = firebaseAppName;
    this.firebaseURL = "https://" + this.firebaseAppName + ".firebaseio.com/";
    return this.firebase = new Batman.Firebase.Reference({
      path: this.firebaseURL
    });
  };

  Batman.Firebase.Storage = (function(_super) {
    __extends(Storage, _super);

    function Storage() {
      var clearLoaded, loadRecords,
        _this = this;
      Storage.__super__.constructor.apply(this, arguments);
      this.firebaseClass = Batman.helpers.pluralize(this.model.resourceName);
      clearLoaded = this.model.clear;
      this.model.clear = function() {
        var result;
        result = clearLoaded.apply(_this.model);
        _this._listeningToList = false;
        delete _this.firebaseListRef;
        return result;
      };
      loadRecords = this.model.load;
      this.model.load = function(options, callback) {
        Batman.developer.warn("Firebase doesn't return all records at once!");
        return loadRecords.apply(_this.model, options, callback);
      };
    }

    Storage.prototype._listenToList = function() {
      var _this = this;
      if (!this._listeningToList) {
        this.firebaseListRef.on('child_added', function(snapshot) {
          var record;
          return record = _this.model.createFromJSON(snapshot.val());
        });
        this.firebaseListRef.on('child_removed', function(snapshot) {
          var record;
          record = _this.model.createFromJSON(snapshot.val());
          return _this.model.get('loaded').remove(record);
        });
        this.firebaseListRef.on('child_changed', function(snapshot) {
          var record;
          return record = _this.model.createFromJSON(snapshot.val());
        });
      }
      return this._listeningToList = true;
    };

    Storage.prototype.before('create', 'update', 'read', 'destroy', 'readAll', 'destroyAll', Storage.skipIfError(function(env, next) {
      if (this.firebaseListRef == null) {
        this.firebaseListRef = Batman.currentApp.firebase.child(this.firebaseClass);
      }
      if (env.subject.get('id')) {
        env.firebaseRef = this.firebaseListRef.child(env.subject.get('id'));
      } else if (env.action === 'readAll' || env.action === 'destroyAll') {
        env.firebaseRef = this.firebaseListRef;
      } else {
        env.firebaseRef = this.firebaseListRef.push();
      }
      return next();
    }));

    Storage.prototype.after('create', 'update', 'read', 'destroy', Storage.skipIfError(function(env, next) {
      env.result = env.subject;
      return next();
    }));

    Storage.prototype.after('readAll', Storage.skipIfError(function(env, next) {
      env.result = [];
      return next();
    }));

    Storage.prototype.create = Storage.skipIfError(function(env, next) {
      var id;
      id = env.firebaseRef.name();
      env.subject._withoutDirtyTracking(function() {
        return this.set('id', id);
      });
      return env.firebaseRef.set(env.subject.toJSON(), function(err) {
        if (err) {
          env.error = err;
          console.log(err);
        }
        return next();
      });
    });

    Storage.prototype.read = Storage.skipIfError(function(env, next) {
      var _this = this;
      return env.firebaseRef.once('value', function(snapshot) {
        var data;
        data = snapshot.val();
        if (data == null) {
          env.error = new _this.constructor.NotFoundError;
        } else {
          env.subject._withoutDirtyTracking(function() {
            return this.fromJSON(data);
          });
        }
        return next();
      });
    });

    Storage.prototype.update = Storage.skipIfError(function(env, next) {
      return env.firebaseRef.set(env.subject.toJSON(), function(err) {
        if (err) {
          env.error = err;
          console.log(err);
        }
        return next();
      });
    });

    Storage.prototype.destroy = Storage.skipIfError(function(env, next) {
      return env.firebaseRef.remove(function(err) {
        if (err) {
          env.error = err;
        }
        return next();
      });
    });

    Storage.prototype.readAll = Storage.skipIfError(function(env, next) {
      this._listenToList();
      return next();
    });

    Storage.prototype.destroyAll = Storage.skipIfError(function(env, next) {
      return env.firebaseRef.remove(function(err) {
        if (err) {
          env.error = err;
        }
        return next();
      });
    });

    return Storage;

  })(Batman.StorageAdapter);

}).call(this);
