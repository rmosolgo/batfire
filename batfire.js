// Generated by CoffeeScript 1.6.3
(function() {
  var BatFire,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BatFire = (function() {
    function BatFire() {}

    return BatFire;

  })();

  BatFire.Reference = (function() {
    function Reference(_arg) {
      this.path = _arg.path, this.parent = _arg.parent;
      if (this.parent) {
        this.ref = this.parent.child(this.path);
      } else {
        this.ref = new Firebase(this.path);
      }
    }

    Reference.prototype.child = function(path) {
      return this.ref.child(path);
    };

    return Reference;

  })();

  BatFire.AppMixin = {
    initialize: function() {
      var appSet;
      this.syncsWithFirebase = function(firebaseAppName) {
        this.firebaseAppName = firebaseAppName;
        this.firebaseURL = "https://" + this.firebaseAppName + ".firebaseio.com/";
        return this.firebase = new BatFire.Reference({
          path: this.firebaseURL
        });
      };
      this.syncs = function(keypathString, _arg) {
        var as, childRef, firebasePath, syncConstructor,
          _this = this;
        as = (_arg != null ? _arg : {}).as;
        if (this._syncKeypaths == null) {
          this._syncKeypaths = [];
        }
        this._syncKeypaths.push(keypathString);
        firebasePath = keypathString.replace(/\./, '/');
        childRef = this.firebase.child("BatFire/" + firebasePath);
        syncConstructor = as;
        this.observe(keypathString, function(newValue, oldValue) {
          if (newValue === oldValue || Batman.typeOf(newValue) === 'Undefined') {
            return;
          }
          if (newValue != null ? newValue.toJSON : void 0) {
            newValue = newValue.toJSON();
          }
          return childRef.set(newValue);
        });
        return childRef.on('value', function(snapshot) {
          var value;
          value = snapshot.val();
          if (syncConstructor != null) {
            value = new syncConstructor(value);
          }
          return _this.set(keypathString, value);
        });
      };
      this._updateFirebaseChild = function(keypathString, newValue) {
        var childRef, firebasePath;
        firebasePath = keypathString.replace(/\./, '/');
        childRef = this.firebase.child("BatFire/" + firebasePath);
        if (newValue != null ? newValue.toJSON : void 0) {
          newValue = newValue.toJSON();
        }
        return childRef.set(newValue);
      };
      appSet = this.set;
      return this.set = function() {
        var firstKeypathPart, keypathString, value;
        keypathString = arguments[0];
        value = arguments[1];
        firstKeypathPart = keypathString.split(".")[0];
        if (__indexOf.call(this._syncKeypaths || [], firstKeypathPart) >= 0) {
          this._updateFirebaseChild(keypathString, value);
        }
        return appSet.apply(this, arguments);
      };
    }
  };

  Batman.App.classMixin(BatFire.AppMixin);

  BatFire.Storage = (function(_super) {
    __extends(Storage, _super);

    Storage.ModelMixin = {
      initialize: function() {
        var _BatFireClearLoaded, _BatFireLoadRecords,
          _this = this;
        this.encode(this.model.primaryKey);
        _BatFireClearLoaded = this.clear;
        this.clear = function() {
          var result;
          result = _BatFireClearLoaded.apply(_this.model);
          _this.storageAdapter()._listeningToList = false;
          delete _this._firebaseListRef;
          return result;
        };
        _BatFireLoadRecords = this.load;
        return this.load = function(options, callback) {
          Batman.developer.warn("Firebase doesn't return all records at once!");
          return _BatFireLoadRecords.apply(_this.model, options, callback);
        };
      }
    };

    function Storage() {
      Storage.__super__.constructor.apply(this, arguments);
      this.firebaseClass = Batman.helpers.pluralize(this.model.resourceName);
      this.model.classMixin(this.ModelMixin);
    }

    Storage.prototype._listenToList = function() {
      var _base,
        _this = this;
      if (!this._listeningToList) {
        if ((_base = this.model)._firebaseListRef == null) {
          _base._firebaseListRef = Batman.currentApp.firebase.child(this.firebaseClass);
        }
        this.model._firebaseListRef.on('child_added', function(snapshot) {
          var record;
          return record = _this.model.createFromJSON(snapshot.val());
        });
        this.model._firebaseListRef.on('child_removed', function(snapshot) {
          var record;
          record = _this.model.createFromJSON(snapshot.val());
          return _this.model.get('loaded').remove(record);
        });
        this.model._firebaseListRef.on('child_changed', function(snapshot) {
          var record;
          return record = _this.model.createFromJSON(snapshot.val());
        });
      }
      return this._listeningToList = true;
    };

    Storage.prototype.before('create', 'update', 'read', 'destroy', 'readAll', 'destroyAll', Storage.skipIfError(function(env, next) {
      if (this.firebaseListRef == null) {
        this.firebaseListRef = Batman.currentApp.firebase.child(this.firebaseClass);
      }
      if (env.subject.get('id')) {
        env.firebaseRef = this.firebaseListRef.child(env.subject.get('id'));
      } else if (env.action === 'readAll' || env.action === 'destroyAll') {
        env.firebaseRef = this.firebaseListRef;
      } else {
        env.firebaseRef = this.firebaseListRef.push();
      }
      return next();
    }));

    Storage.prototype.after('create', 'update', 'read', 'destroy', Storage.skipIfError(function(env, next) {
      env.result = env.subject;
      return next();
    }));

    Storage.prototype.after('readAll', Storage.skipIfError(function(env, next) {
      env.result = [];
      return next();
    }));

    Storage.prototype.create = Storage.skipIfError(function(env, next) {
      var firebaseId;
      firebaseId = env.firebaseRef.name();
      env.subject._withoutDirtyTracking(function() {
        return this.set(env.subject.constructor.primaryKey, firebaseId);
      });
      return env.firebaseRef.set(env.subject.toJSON(), function(err) {
        if (err) {
          env.error = err;
          console.log(err);
        }
        return next();
      });
    });

    Storage.prototype.read = Storage.skipIfError(function(env, next) {
      var _this = this;
      return env.firebaseRef.once('value', function(snapshot) {
        var data;
        data = snapshot.val();
        if (data == null) {
          env.error = new _this.constructor.NotFoundError;
        } else {
          env.subject._withoutDirtyTracking(function() {
            return this.fromJSON(data);
          });
        }
        return next();
      });
    });

    Storage.prototype.update = Storage.skipIfError(function(env, next) {
      return env.firebaseRef.set(env.subject.toJSON(), function(err) {
        if (err) {
          env.error = err;
          console.log(err);
        }
        return next();
      });
    });

    Storage.prototype.destroy = Storage.skipIfError(function(env, next) {
      return env.firebaseRef.remove(function(err) {
        if (err) {
          env.error = err;
        }
        return next();
      });
    });

    Storage.prototype.readAll = Storage.skipIfError(function(env, next) {
      this._listenToList();
      return next();
    });

    Storage.prototype.destroyAll = Storage.skipIfError(function(env, next) {
      return env.firebaseRef.remove(function(err) {
        if (err) {
          env.error = err;
        }
        return next();
      });
    });

    return Storage;

  })(Batman.StorageAdapter);

}).call(this);
